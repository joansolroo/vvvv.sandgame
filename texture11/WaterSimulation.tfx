//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture2D topography;
Texture2D seaMask;

float2 size;
float speed = 0.01;
float humidity = 0;
float lakeFactor = 0.01;
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	int count = 0;
	float flow = 0;
	float3 localTopo = topography.Sample(linearSampler,input.uv).xyz;
	float currentValue = texture2d.Sample(linearSampler,input.uv).x;
	
	float totalIn = 0;
	float totalOu = 0;
	
	for(int dx = -1; dx <= 1; ++dx){
		for(int dy = -1; dy <= 1; ++dy){
			if(dx != 0 || dy != 0){
				float v = texture2d.Sample(linearSampler,input.uv+float2(dx,dy)/size).x;
				float3 t = topography.Sample(linearSampler,input.uv+float2(dx,dy)/size).xyz;
				float delta = distance(t.xy,float2(0,0));
				if(t[0]>localTopo[0]){
					flow+=speed*(1-delta)*v*speed;
				}else if(t[0]<localTopo[0])
					flow-=speed*(1-delta)*v*speed;
				else
					flow += lakeFactor;
				if(v>0.7)
					count++;
			}
		}
	}
	if(count>=6)
		flow = speed;
	float4 c = texture2d.Sample(linearSampler,input.uv);
	float sea = seaMask.Sample(linearSampler,input.uv).x;
	if(sea < 0.5)
		return currentValue+flow+humidity;
	else
		return float4(0,0,0,0);
	
	
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



