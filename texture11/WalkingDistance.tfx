//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture2D information;

float walkingDist =0.01;
float minimum = 0.1;
float maximum = 1;
int2 size = {256,256};
float3 maskRange = {0,0.9,1};

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};
SamplerState pointSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};
struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	int count = 0;
	float dist = texture2d.Sample(pointSampler,input.uv).x;
	float i = texture2d.Sample(pointSampler,input.uv).y;
	//float dist = currentValue;
	
	for(int dx = -1; dx <= 1; ++dx){
		for(int dy = -1; dy <= 1; ++dy){
			if(dx != 0 || dy != 0){
				float vN = texture2d.Sample(linearSampler,input.uv+float2(dx,dy)/size).x;
				float iN = texture2d.Sample(linearSampler,input.uv+float2(dx,dy)/size).y;
				if(i>0.5)
					dist = dist;
				else 
				if(iN>0){
					i = max(i,iN);
					if(abs(dx)+abs(dy)==2)
						dist = min(dist,vN+walkingDist*2);
					else
						dist = min(dist,vN+walkingDist);
				}
			}
		}
	}
	return float4(dist,i,0,1);
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
	/*pass P1
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}*/
}

float4 PS_initialize(psInput input) : SV_Target
{
	float i = information.Sample(pointSampler,input.uv).x;
	float v = maximum;
	if(i>minimum){
		v = 0;
		i = 1;
	}
	return float4(v,i,0,1);
}

technique10 Initialize
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_initialize()));
	}
	/*pass P1
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}*/
}


float4 PS_Mask(psInput input) : SV_Target
{
	float v = texture2d.Sample(pointSampler,input.uv).x;
	float i = texture2d.Sample(pointSampler,input.uv).y;
	if(i>0){
		if(v>= maskRange[0] && v< maskRange[1])
			v = (v-maskRange[0])/(maskRange[1]-maskRange[0]);
		else if(v>= maskRange[1] && v< maskRange[2])
			v = (1-v-maskRange[1])/(maskRange[2]-maskRange[1]);
		else
			v = 0;	
	}else
		v = 0;
	return float4(v,v,v,1);
}

technique10 Mask
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_Mask()));
	}
	/*pass P1
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}*/
}





