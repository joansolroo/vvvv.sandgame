//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture2D previousFrame;
float2 rangingFactor = {0.5,0.5};
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 c1 = texture2d.Sample(linearSampler,input.uv);
	float4 c2 = previousFrame.Sample(linearSampler,input.uv);
	return c1*rangingFactor[0]+c2*rangingFactor[1];
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}


float4 PS_max(psInput input) : SV_Target
{
	float4 c1 = texture2d.Sample(linearSampler,input.uv);
	float4 c2 = previousFrame.Sample(linearSampler,input.uv);
	if(c1.r > c2.r)
		return c1;
	else
		return c2;
//	return c1*rangingFactor[0]+c2*rangingFactor[1];
}

technique10 Maximum
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_max()));
	}
}



