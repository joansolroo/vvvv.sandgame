//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 
<!DOCTYPE PATCH  SYSTEM "C:\vvvv\vvvv_45beta33.7_x64\lib\45beta33.7.dtd" >
   <PATCH>
   <NODE systemname="Transform (Transform 3d Vector)" nodename="Transform (Transform 3d Vector)" componentmode="Hidden" id="1278">
   <BOUNDS type="Node" left="5175" top="8850" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Transform Out" visible="1">
   </PIN>
   <PIN pinname="Scale XYZ" slicecount="3" values="0.15,0.15,0.15">
   </PIN>
   <PIN pinname="Translate XYZ" slicecount="3" visible="1" values="0,0,0">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="1279" systemname="IOBox (Value Advanced)">
   <BOUNDS type="Box" left="4245" top="7830" width="795" height="720">
   </BOUNDS>
   <BOUNDS type="Node" left="4245" top="7830" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Y Input Value" slicecount="3" visible="1" values="0,0,0.01">
   </PIN>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Vector Size" slicecount="1" values="3">
   </PIN>
   <PIN pinname="Rows" slicecount="1" values="3">
   </PIN>
   </NODE>
   <LINK srcnodeid="1279" srcpinname="Y Output Value" dstnodeid="1278" dstpinname="Translate XYZ">
   </LINK>
   </PATCH>
Texture2D texture2d : PREVIOUS;
float2 size = float2(64,64);
float gradientScale = 1.0f/400;
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 c = texture2d.Sample(linearSampler,input.uv);
	float4 cUp = texture2d.Sample(linearSampler,input.uv+float2(0,-1)/size.x);
	float4 cLeft = texture2d.Sample(linearSampler,input.uv+float2(-1,0)/size.y);
	return float4(c.x,(c.x - cLeft.x)+0.5, (c.x - cUp.x)+0.5, 1);
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}

float4 PS_normalize(psInput input) : SV_Target
{
	float4 c = texture2d.Sample(linearSampler,input.uv);
	float4 cUp = texture2d.Sample(linearSampler,input.uv+float2(0,-1)/size.x);
	float4 cLeft = texture2d.Sample(linearSampler,input.uv+float2(-1,0)/size.y);
	return float4(c.y,(c.y - cLeft.y)/distance(c.xz,cLeft.xz)*gradientScale+0.5, (c.y - cUp.y)/distance(c.xz,cUp.xz)*gradientScale+0.5, 1);
}

technique10 Process_normalize
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_normalize()));
	}
}





