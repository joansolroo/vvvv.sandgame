//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
float2 size= float2(128,128);
float fill = 0.5;
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

int CountNeighbours(float2 uv){
	int count = 0;
	for(int dx = -1; dx <= 1; ++dx){
		for(int dy = -1; dy <= 1; ++dy){
			if(dx != 0 || dy != 0){
				float v = texture2d.Sample(linearSampler,uv+float2(dx,dy)/size).x;
				if(v>fill)
					count++;
			}
		}
	}
	return count;
}
float4 PS(psInput input) : SV_Target
{
	
	float count = CountNeighbours(input.uv);
	
	float2 precision = 1.0f/size;
	if(abs(input.uv.x - 0)<precision.x || abs(input.uv.x - 1)<precision.x || abs(input.uv.y - 0)<precision.y || abs(input.uv.y - 1)<precision.y)
		return float4(1,1,1,1);	
	if(count > 4) 
		return float4(1,1,1,1);
	else if(count < 4)
		return float4(0,0,0,1);
	else
		return texture2d.Sample(linearSampler,input.uv);
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}	
}

float4 PS_UV(psInput input) : SV_Target
{
	
	
	float4 c = texture2d.Sample(linearSampler,input.uv);
	if(c.r == 1)
	{	
		return float4(1,1,1,1);
	}
	else
	{
		return float4(input.uv,0,1);
	}
}

technique10 Color_UV
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_UV()));
	}	
}

float4 PS_join(psInput input) : SV_Target
{
	
	
	float4 c = texture2d.Sample(linearSampler,input.uv);
	
	for(int dx = -1; dx <= 1; ++dx){
		for(int dy = -1; dy <= 1; ++dy){
			/*if((dx != 0 || dy != 0))*/{
				float4 c2 = texture2d.Sample(linearSampler,input.uv+float2(dx,dy)/size);
				if(c2.z<1 &&(c2.x>c.x || (c2.x==c.x && c2.y > c.y)))
					c = c2;
			}
		}
	}
	return c;
	
	
}

technique10 Color_join
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_join()));
	}	
}


float4 PS_count(psInput input) : SV_Target
{
	float count = CountNeighbours(input.uv);
	if(count > 6) 
		return float4(1,1,1,1);
	else if(count > 4)
		return float4(1,0,0,1);
	else if(count > 2)
		return float4(0,1,0,1);
	else
		return float4(0,0,0,1);
}

technique10 Count
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_count()));
	}	
}

float4 PS_initialize(psInput input) : SV_Target
{
	float2 precision = 1.0f/size;
	if(abs(input.uv.x - 0)<precision.x || abs(input.uv.x - 1)<precision.x || abs(input.uv.y - 0)<precision.y || abs(input.uv.y - 1)<precision.y)
		return float4(1,1,1,1);	
	else{
		float v = texture2d.Sample(linearSampler,input.uv).x;
		return float4(v,v,v,1);
	};
}

technique10 Initialize
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_initialize()));
	}
}

