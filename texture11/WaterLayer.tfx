//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D previousTexture : PREVIOUS;
Texture2D colorTexture;
Texture2D topology;

float2 heightRange = float2(0.0,1);
float2 gradientThreshold = float2(0.1,0.1);
float4 color<bool color=true; String uiname="Ambient Color";>  = {0, 0, 1, 1};

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 previous = previousTexture.Sample(linearSampler,input.uv);
	float4 info = topology.Sample(linearSampler,input.uv);
	float4 tex = colorTexture.Sample(linearSampler,input.uv);
	if(info.x ==1)
		return color;
		//result.x = 1;
	//if(abs(c.y)>gradientThreshold.x)
	//	result.y = 1;
	//if(abs(c.z)>gradientThreshold.y)
	//	result.z = 1;
	else
		return previous;
	
//return result;
	
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



