//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;

float minimumFill = 0.5;
float2 size;
float speed = 0.01;
int2 growingNeighbourhood = {1,5};
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	int count = 0;
	float currentValue = texture2d.Sample(linearSampler,input.uv).x;
	for(int dx = -1; dx <= 1; ++dx){
		for(int dy = -1; dy <= 1; ++dy){
			if(dx != 0 || dy != 0){
				float v = texture2d.Sample(linearSampler,input.uv+float2(dx,dy)/size).x;
				if(/*currentValue<1 && */v>=minimumFill)
					count++;
			}
		}
	}
	
	float4 c = texture2d.Sample(linearSampler,input.uv);
	if(count>=growingNeighbourhood[0] && count<=growingNeighbourhood[1])
		return c+speed;
	else if(count>growingNeighbourhood[1])
		return c-speed;
	else
		return c;
	
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



