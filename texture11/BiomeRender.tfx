//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture2D topology;
Texture2D mountain;
Texture2D forest;
Texture2D sand;
Texture2D noise;
float4 color <bool color=true;String uiname="Color";> ;
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = wrap;
    AddressV = wrap;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 c = texture2d.Sample(linearSampler,input.uv);
	float4 t = topology.Sample(linearSampler,input.uv);
	float4 n = noise.Sample(linearSampler,input.uv);
	float4 m = float4(0.4,0.3,0.3,1);
	float4 s = float4(0.7,0.7,0.3,1);
	float4 f = float4(0,0.6,0,1)*n;
	float4 g = float4(0,0.8,0,1)*n;
	if (distance(c.xyz, float3(1,1,1))<0.01)
		return float4(0.7,0.7,0.7,1)*color;
	else if(distance(c.xyz, float3(0,0,1))<0.01)
		return float4(0,0,1,1)*color;
	else if(distance(c.xyz, float3(0,1,1))<0.01)
		return float4(0.8,1,1,1)*color;
	//else if(river.r >0.8)
	//	 return float4(0,1,1,1)*n*color;
	else if(distance(c.xyz, float3(0,1,1))<0.01)
		return c*color;
	else if (distance(c.xyz, float3(1,1,0))<0.01)
		return s*color;
	else if(distance(c.xyz, float3(1,1,0.5))<0.01)
		return float4(1,1,0.5,1)*n;
	else if(distance(c.xyz, float3(0,1,0))<0.01)
		return g*color;
	else if(distance(c.xyz, float3(0,0.5,0))<0.01)
		return f*color;
	
	else
		return m*color;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}

float4 PS_WB(psInput input) : SV_Target
{
	float4 c = texture2d.Sample(linearSampler,input.uv);
	float4 n = noise.Sample(linearSampler,input.uv);
	float h = c.y/0.1;
	int levels = 10;
	int level = round(h*levels*levels)/levels;
	int s = round(h*levels*levels)%levels;
	if(s > levels/2 )
		return float4(1,1,1,1)*n;
	else
		return float4(0,0,0,1)*n;
}

technique10 BlackandWhite
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_WB()));
	}
}



