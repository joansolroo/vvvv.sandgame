//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture2D information;

float minNeighbours = 4;
float maxNeighbours = 8;
float minFill = 0.5;
int2 size = {256,256};

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};
SamplerState pointSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};
struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	int count = 0;
	float dist = texture2d.Sample(pointSampler,input.uv).x;
	float i = texture2d.Sample(pointSampler,input.uv).y;
	//float dist = currentValue;
	
	for(int dx = -1; dx <= 1; ++dx){
		for(int dy = -1; dy <= 1; ++dy){
			//if(dx != 0 || dy != 0)
			{
				float vN = texture2d.Sample(linearSampler,input.uv+float2(dx,dy)/size).x;
				if(vN>minFill)
					count++;
			}
		}
	}
	float v = 0;
	if(count>minNeighbours)
		v = 1;
	return float4(v,v,v,1);
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
	/*pass P1
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}*/
}

float4 PS_gradient(psInput input) : SV_Target
{
	int count = 0;
	float dist = texture2d.Sample(pointSampler,input.uv).x;
	float i = texture2d.Sample(pointSampler,input.uv).y;
	//float dist = currentValue;
	
	for(int dx = -1; dx <= 1; ++dx){
		for(int dy = -1; dy <= 1; ++dy){
			//if(dx != 0 || dy != 0)
			{
				float vN = texture2d.Sample(linearSampler,input.uv+float2(dx,dy)/size).x;
				if(vN>minFill)
					count++;
			}
		}
	}
	float v = 0;
	if(count>minNeighbours)
		v = count/maxNeighbours;
	return float4(v,v,v,1);
}

technique10 Gradient
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS_gradient()));
	}
	/*pass P1
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}*/
}



